defaultTasks 'clean', 'test', 'aggregate'

repositories {
    mavenCentral()
    mavenLocal()
    gradlePluginPortal()
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:3.9.8"
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "net.serenity-bdd.serenity-gradle-plugin"

sourceCompatibility = 11
targetCompatibility = 11

ext {
    serenity_version = '3.9.4'
    junit_version = '4.13.1'
    assertj_core_version = '3.23.1'
    logback_version = '1.2.10'
}

dependencies {
    implementation(
            "net.serenity-bdd:serenity-core:${serenity_version}",
            "net.serenity-bdd:serenity-cucumber:${serenity_version}",
            "net.serenity-bdd:serenity-screenplay:${serenity_version}",
            "net.serenity-bdd:serenity-screenplay-webdriver:${serenity_version}",
            "net.serenity-bdd:serenity-ensure:${serenity_version}",
            "junit:junit:${junit_version}",
            "ch.qos.logback:logback-classic:${logback_version}",
            "org.assertj:assertj-core:${assertj_core_version}"
    )
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.named('test') {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

serenity {
    // Specify the root package of any JUnit acceptance tests
    testRoot = "org.demo.qa"
    // Specify the root directory of any Cucumber feature files
    requirementsDir = file("src/test/resources/features")
}

gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)

task runApp(type: JavaExec) {
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('mainClass')) {
        println "Main Class Executed: ${project.mainClass}"
        mainClass = "org.demo.${project.mainClass}"
    }
    // arguments to pass to the application
    args project.hasProperty('args') ? project.args.split(' ') : []
    // Set the JVM argument for UTF-8 encoding
    jvmArgs '-Dfile.encoding=UTF-8'
    // Set standard input to System.in
    standardInput = System.in
}
